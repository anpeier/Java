package interfaces;
/*
 * 
 * 接口的使用
 * 1.接口使用interface来定义
 * 2.Java中，接口和类是并列的两个结构
 * 3.如何定义接口：定义接口中的成员
 * 
 * 		3.1 JDK7以前：只能定义全局常量和抽象方法
 * 				> 全局常量：public static final的，但是书写时可以省略
 * 				> 抽象方法：public abstract的
 * 				
 * 		3.2 JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法，默认方法
 * 
 * 4.接口中不能定义构造器！意味着接口不能实例化
 * 
 * 5.JAVA开发中，接口都通过让类去实现(implements)的方式来使用，
 *   如果实现类覆盖了接口中的所有抽象方法，则此实现类可以实例化，
 *   否则此实现类为抽象类
 *   
 * 6.Java类可以实现多个接口 ---> 弥补了Java单继承的局限性
 *   格式：class AA extends BB implements CC,DD,EE
 *   
 * 7.接口之间可以多继承     
 * 
 * 8.接口的具体使用，体现多态性
 * 
 * 9.接口，实际上可以看作一种规范
 */
public class InterfaceTest {

	public static void main(String[] args) {
		System.out.println(Flyable.MAX_SPEED);
		System.out.println(Flyable.MIN_SPEED);
		
		Plane p1 = new Plane();
		p1.fly();
	}
}

interface Attackable{
	
	void attack();
	
}

interface Flyable{
	
	//全局常量
	public static final int MAX_SPEED = 7900; //第一宇宙速度
	int MIN_SPEED = 1;//省略了public static final
	//抽象方法
	public abstract void fly();
	//省略了public abstract
	void stop();
}

class Plane implements Flyable{

	@Override
	public void fly() {
		System.out.println("起飞");
	}

	@Override
	public void stop() {
		System.out.println("停！");
	}
	
}

abstract class Kite implements Flyable{

}

class Bullet extends Object implements Flyable,Attackable,CC{

	@Override
	public void attack() {
		// TODO 自动生成的方法存根
		
	}

	@Override
	public void fly() {
		// TODO 自动生成的方法存根
		
	}

	@Override
	public void stop() {
		// TODO 自动生成的方法存根
		
	}

	@Override
	public void method1() {
		// TODO 自动生成的方法存根
		
	}

	@Override
	public void method2() {
		// TODO 自动生成的方法存根
		
	}
	
}

//************************
interface AA{
	void method1();
}
interface BB{
	void method2();
}
interface CC extends AA,BB{
	
}